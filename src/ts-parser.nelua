## cinclude "tree_sitter/parser.h"
## cinclude "tree_sitter/alloc.h"

global treesitter = @record{}

global treesitter.TSSymbol <cimport, nodecl> = @uint16

global treesitter.TSLexer <cimport, nodecl> = @record{
  lookahead: int32,
  result_symbol: treesitter.TSSymbol,
  advance: function(_: *treesitter.TSLexer, _: boolean): void,
  mark_end: function(_: *treesitter.TSLexer): void,
  get_column: function(_: *treesitter.TSLexer): uint32,
  is_at_included_range_start: function(_: *treesitter.TSLexer <const>): boolean,
  eof: function(_: *treesitter.TSLexer <const>): boolean,
  log: function(__: *treesitter.TSLexer <const>, _: cstring, ...: varargs): void,
}

function treesitter.TSLexer:advance(skip: facultative(boolean)): void
  ## if skip.type.is_nil then
    local skip = false
  ## end
  self.advance(self, skip)
end

function treesitter.TSLexer:mark_end(): void
  self.mark_end(self)
end

function treesitter.TSLexer:get_column(): uint32
  return self.get_column(self)
end

function treesitter.TSLexer:is_at_included_range_start(): boolean
  return self.is_at_included_range_start(self)
end

function treesitter.TSLexer:eof(): boolean
  return self.eof(self)
end

function treesitter.TSLexer:log(fmt: string, ...: varargs): void
  self.log(self, fmt, ...)
end

local function ts_malloc(_: usize): pointer <cimport, nodecl> end
local function ts_calloc(_: usize, _: usize): pointer <cimport, nodecl> end
local function ts_realloc(_: pointer, _: usize): pointer <cimport, nodecl> end
local function ts_free(_: pointer): void <cimport, nodecl> end

local allocator = @record{}

function allocator:alloc(size: usize): pointer <inline>
  if unlikely(size == 0) then return nilptr end
  return ts_malloc(size)
end

function allocator:alloc0(size: usize): pointer <inline>
  if unlikely(size == 0) then return nilptr end
  return ts_calloc(size, 1)
end

function allocator:dealloc(p: pointer): void <inline>
  if unlikely(p == nilptr) then return end
  ts_free(p)
end

function allocator:realloc(p: pointer, nsize: usize, osize: usize): pointer <inline>
  if unlikely(nsize == 0) then
    if likely(p ~= nilptr) then
      ts_free(p)
    end
    return nilptr
  elseif unlikely(nsize == osize) then
    return p
  end
  return ts_realloc(p, nsize)
end

global embedded_general_allocator = allocator{}
